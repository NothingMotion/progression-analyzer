// Generated by Dagger (https://dagger.dev).
package com.nothingmotion.brawlprogressionanalyzer.ui.accounts;

import com.nothingmotion.brawlprogressionanalyzer.data.remote.repository.fake.FakeBrawlerTableRepository;
import com.nothingmotion.brawlprogressionanalyzer.data.remote.repository.fake.FakePassTableRepository;
import com.nothingmotion.brawlprogressionanalyzer.data.remote.repository.fake.FakeStarrDropTableRepository;
import com.nothingmotion.brawlprogressionanalyzer.data.remote.repository.fake.FakeUpgradeTableRepository;
import com.nothingmotion.brawlprogressionanalyzer.domain.repository.AccountRepository;
import com.nothingmotion.brawlprogressionanalyzer.domain.repository.BrawlerRepository;
import com.nothingmotion.brawlprogressionanalyzer.ui.future_account.FutureProgressViewModel;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class FutureProgressViewModel_Factory implements Factory<FutureProgressViewModel> {
  private final Provider<FakeBrawlerTableRepository> brawlerTableRepositoryProvider;

  private final Provider<FakeUpgradeTableRepository> upgradeTableRepositoryProvider;

  private final Provider<FakePassTableRepository> passRepositoryProvider;

  private final Provider<FakeStarrDropTableRepository> starrDropRepositoryProvider;

  private final Provider<BrawlerRepository> brawlerDataRepositoryProvider;

  private final Provider<AccountRepository> accountRepositoryProvider;

  public FutureProgressViewModel_Factory(
      Provider<FakeBrawlerTableRepository> brawlerTableRepositoryProvider,
      Provider<FakeUpgradeTableRepository> upgradeTableRepositoryProvider,
      Provider<FakePassTableRepository> passRepositoryProvider,
      Provider<FakeStarrDropTableRepository> starrDropRepositoryProvider,
      Provider<BrawlerRepository> brawlerDataRepositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider) {
    this.brawlerTableRepositoryProvider = brawlerTableRepositoryProvider;
    this.upgradeTableRepositoryProvider = upgradeTableRepositoryProvider;
    this.passRepositoryProvider = passRepositoryProvider;
    this.starrDropRepositoryProvider = starrDropRepositoryProvider;
    this.brawlerDataRepositoryProvider = brawlerDataRepositoryProvider;
    this.accountRepositoryProvider = accountRepositoryProvider;
  }

  @Override
  public FutureProgressViewModel get() {
    return newInstance(brawlerTableRepositoryProvider.get(), upgradeTableRepositoryProvider.get(), passRepositoryProvider.get(), starrDropRepositoryProvider.get(), brawlerDataRepositoryProvider.get(), accountRepositoryProvider.get());
  }

  public static FutureProgressViewModel_Factory create(
      Provider<FakeBrawlerTableRepository> brawlerTableRepositoryProvider,
      Provider<FakeUpgradeTableRepository> upgradeTableRepositoryProvider,
      Provider<FakePassTableRepository> passRepositoryProvider,
      Provider<FakeStarrDropTableRepository> starrDropRepositoryProvider,
      Provider<BrawlerRepository> brawlerDataRepositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider) {
    return new FutureProgressViewModel_Factory(brawlerTableRepositoryProvider, upgradeTableRepositoryProvider, passRepositoryProvider, starrDropRepositoryProvider, brawlerDataRepositoryProvider, accountRepositoryProvider);
  }

  public static FutureProgressViewModel newInstance(
      FakeBrawlerTableRepository brawlerTableRepository,
      FakeUpgradeTableRepository upgradeTableRepository, FakePassTableRepository passRepository,
      FakeStarrDropTableRepository starrDropRepository, BrawlerRepository brawlerDataRepository,
      AccountRepository accountRepository) {
    return new FutureProgressViewModel(brawlerTableRepository, upgradeTableRepository, passRepository, starrDropRepository, brawlerDataRepository, accountRepository);
  }
}
