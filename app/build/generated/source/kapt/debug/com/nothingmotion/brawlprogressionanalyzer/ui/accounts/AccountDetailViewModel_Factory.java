// Generated by Dagger (https://dagger.dev).
package com.nothingmotion.brawlprogressionanalyzer.ui.accounts;

import com.nothingmotion.brawlprogressionanalyzer.data.PreferencesManager;
import com.nothingmotion.brawlprogressionanalyzer.data.remote.repository.fake.FakeAccountRepository;
import com.nothingmotion.brawlprogressionanalyzer.domain.repository.AccountRepository;
import com.nothingmotion.brawlprogressionanalyzer.ui.account_detail.AccountDetailViewModel;
import com.nothingmotion.brawlprogressionanalyzer.util.TokenManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AccountDetailViewModel_Factory implements Factory<AccountDetailViewModel> {
  private final Provider<AccountRepository> accountRepositoryProvider;

  private final Provider<FakeAccountRepository> fakeAccountRepositoryProvider;

  private final Provider<PreferencesManager> preferencesManagerProvider;

  private final Provider<TokenManager> tokenManagerProvider;

  public AccountDetailViewModel_Factory(Provider<AccountRepository> accountRepositoryProvider,
      Provider<FakeAccountRepository> fakeAccountRepositoryProvider,
      Provider<PreferencesManager> preferencesManagerProvider,
      Provider<TokenManager> tokenManagerProvider) {
    this.accountRepositoryProvider = accountRepositoryProvider;
    this.fakeAccountRepositoryProvider = fakeAccountRepositoryProvider;
    this.preferencesManagerProvider = preferencesManagerProvider;
    this.tokenManagerProvider = tokenManagerProvider;
  }

  @Override
  public AccountDetailViewModel get() {
    return newInstance(accountRepositoryProvider.get(), fakeAccountRepositoryProvider.get(), preferencesManagerProvider.get(), tokenManagerProvider.get());
  }

  public static AccountDetailViewModel_Factory create(
      Provider<AccountRepository> accountRepositoryProvider,
      Provider<FakeAccountRepository> fakeAccountRepositoryProvider,
      Provider<PreferencesManager> preferencesManagerProvider,
      Provider<TokenManager> tokenManagerProvider) {
    return new AccountDetailViewModel_Factory(accountRepositoryProvider, fakeAccountRepositoryProvider, preferencesManagerProvider, tokenManagerProvider);
  }

  public static AccountDetailViewModel newInstance(AccountRepository accountRepository,
      FakeAccountRepository fakeAccountRepository, PreferencesManager preferencesManager,
      TokenManager tokenManager) {
    return new AccountDetailViewModel(accountRepository, fakeAccountRepository, preferencesManager, tokenManager);
  }
}
